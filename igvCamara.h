#ifndef __IGVCAMARA
#define __IGVCAMARA

#if defined(__APPLE__) && defined(__MACH__)
#include <GLUT/glut.h>
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#else

#include <GL/glut.h>

#endif   // defined(__APPLE__) && defined(__MACH__)

#include "igvPunto3D.h"

/**
 * Vistas canónicas
 */
enum poscam
{  panoramica   ///< Vista panorámica (cámara en diagonal)
   , planta   ///< Vista de planta (cámara en el eje Y)
   , perfil   ///< Vista de perfil (cámara en el eje X)
   , alzado   ///< Vista de alzado (cámara en el eje Z)
};

/**
 * Etiquetas para los diferentes tipos de cámara
 */
enum tipoCamara
{  IGV_PARALELA   ///< Proyección paralela
   , IGV_FRUSTUM   ///< Proyección en perspectiva usando OpenGL
   , IGV_PERSPECTIVA   ///< Proyección en perspectiva usando GLU
};

/**
 * Los objetos de esta clase representan cámaras de visualización en la aplicación
 */
class igvCamara
{  private:
      // atributos
      tipoCamara tipo = IGV_PERSPECTIVA;  ///< Tipo de la cámara
      poscam vis = panoramica;   ///< Tipo de vista

      // ventana de visión: parámetros proyección paralela y frustum
      GLdouble xwmin = -3    ///< Coordenada X mínima del frustum/proyección paralela
               , xwmax = 3   ///< Coordenada X máxima del frustum/proyección paralela
               , ywmin = -3   ///< Coordenada Y mínima del frustum/proyección paralela
               , ywmax = 3   ///< Coordenada Y máxima del frustum/proyección paralela
               ;

      // ventana de visión: parámetros proyección perspectiva
      GLdouble angulo = 60   ///< Ángulo de apertura (proyección perspectiva)
               , raspecto = 1.33   ///< Razón de aspecto (proyección perspectiva)
               ;

      // distancias de planos cercano y lejano
      GLdouble znear = 1    ///< Distancia de la cámara al plano Z near
               , zfar = 100 ///< Distancia de la cámara al plano Z far
               ;

      // punto de visión
      igvPunto3D P0 = { 10, 4, 10 };   ///< Posición de la cámara

      // punto de referencia de visión
      igvPunto3D r = { 0, 0, 0 };   ///< Punto al que mira la cámara

      // vector arriba
      igvPunto3D V = { 0, 1, 0 };   ///< Vector que indica la vertical

      // Métodos

   public:
      // Constructores por defecto y destructor
      /// Constructor por defecto
      igvCamara () = default;

      /// Destructor
      ~igvCamara () = default;

      // Otros constructores
      igvCamara ( tipoCamara _tipo, igvPunto3D _P0, igvPunto3D _r, igvPunto3D _V );

      // Métodos
      // define la posición de la cámara
      void set ( igvPunto3D _P0, igvPunto3D _r, igvPunto3D _V );

      // define una cámara de tipo paralela o frustum
      void set ( tipoCamara _tipo, igvPunto3D _P0, igvPunto3D _r, igvPunto3D _V
                 , double _xwmin, double _xwmax, double _ywmin
                 , double _ywmax, double _znear, double _zfar );

      // define una cámara de tipo perspectiva
      void set ( tipoCamara _tipo, igvPunto3D _P0, igvPunto3D _r, igvPunto3D _V
                 , double _angulo, double _raspecto, double _znear, double _zfar );

      void aplicar (); // aplica a los objetos de la escena la transformación
                       // de visión y la transformación de proyección
                       // asociadas a los parámetros de la cámara

      void set_vista ( tipoCamara t );

      tipoCamara get_vista ();

      void set_poscam ( poscam x );

      poscam get_poscam ();
};

#endif   // __IGVCAMARA

